Marker Interface:
-----------------

They are used to Mark the class ,So what  operation is being will be enabled by the JVM.

Zero abstracts Methods.

Ex:
Cloning : (Create a Copy of Ojbect)
public class Employee implements Cloneable{

}
Serializable (Transferring Object to Byte Format)
public class Employee implements Serializable{

}


package com.demo.object;

public class Employee implements Cloneable {

	int x = 10;
	int y = 20;
	Address address;

	public Employee(Address address) {
		this.address = address;
	}

	public static void main(String[] args) throws CloneNotSupportedException {
		Address add = new Address("apet", "hyd", "ts");
		
		Employee emp = new Employee(add);		
		System.out.println(emp.x);
		System.out.println(emp.y);
		System.out.println(emp.address.city);
		System.out.println(emp.address.street);
		System.out.println(emp.address.state);
		
		//Object.clone()
		Employee emp1 = (Employee)emp.clone();
		System.out.println(emp1.x);
		System.out.println(emp1.y);
		System.out.println(emp1.address.city);
		System.out.println(emp1.address.street);
		System.out.println(emp1.address.state);
		
		//Modifying Cloned Object
		emp1.address.state="No Name";
		
		//Actual Object state value
		System.out.println(emp.address.state);
		

	}

}


package com.demo.object;

public class Address {

	String street ;
	String city ;
	String state ;
	
	public Address(String street, String city, String state) {
		this.street = street;
		this.city = city;
		this.state = state;
	}

}


Shallow Copy:
During cloning / object.clone() , if we modify clone Object if the changes get reflected in the Actual bject we call it as Shallow Cloning.

By default , Object class enables Shallow Cloning.


Deep cloning:
-------------

During cloning / object.clone() , if we modify cloned Object changes should not be reflected in actual Object.

IN order to achieve deep cloning  we have to ovveride clone() of object class.

For ex:

	@Override
	protected Object clone() throws CloneNotSupportedException {
     //Logic for deep cloning
	}

